// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  email           String   @unique
  password        String
  bio             String?
  profilePicture  String?
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Posts created by this user
  posts           Post[]
  
  // Comments made by this user
  comments        Comment[]
  
  // Likes given by this user
  likes           Like[]
  
  // Following relationships
  following       Follow[] @relation("UserFollowing")
  followers       Follow[] @relation("UserFollowers")

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  content     String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Author of the post
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Post interactions
  comments    Comment[]
  likes       Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Comment author
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Post being commented on
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // User who liked
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Post being liked
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Ensure a user can only like a post once
  @@unique([userId, postId])
  @@map("likes")
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // User who is following
  followerId  String
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  
  // User being followed
  followingId String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  // Ensure a user can't follow someone twice
  @@unique([followerId, followingId])
  @@map("follows")
}
